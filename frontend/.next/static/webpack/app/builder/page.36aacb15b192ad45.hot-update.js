"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/builder/page",{

/***/ "(app-pages-browser)/./src/components/forms/FormSaver.tsx":
/*!********************************************!*\
  !*** ./src/components/forms/FormSaver.tsx ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autoSaveForm: () => (/* binding */ autoSaveForm),\n/* harmony export */   getFormData: () => (/* binding */ getFormData),\n/* harmony export */   saveForm: () => (/* binding */ saveForm),\n/* harmony export */   updateForm: () => (/* binding */ updateForm)\n/* harmony export */ });\n// form-service.ts\nasync function saveForm(formName, formFields, userId) {\n    try {\n        if (!formFields || formFields.length === 0) {\n            throw new Error('No form fields provided');\n        }\n        const simplifiedFields = formFields.map((field)=>({\n                id: field.id,\n                type: field.type,\n                label: field.label,\n                required: field.required || false,\n                options: field.options || [],\n                placeholder: field.placeholder || \"Enter \".concat(field.label.toLowerCase())\n            }));\n        // Ensure we have a valid form name and timestamp\n        const currentTimestamp = new Date().toISOString();\n        const validFormName = (formName === null || formName === void 0 ? void 0 : formName.trim()) || 'Untitled Form';\n        const payload = {\n            form_name: validFormName,\n            fields: simplifiedFields,\n            user_id: userId,\n            updated_at: currentTimestamp,\n            created_at: currentTimestamp\n        };\n        console.log('Saving form with payload:', payload);\n        const backendUrl = \"http://localhost:8000\" + '/api/forms/auto-save';\n        const response = await fetch(backendUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload),\n            credentials: 'include'\n        });\n        if (!response.ok) {\n            let errorMessage = 'Failed to save form';\n            try {\n                const errorData = await response.json();\n                errorMessage = errorData.detail || errorData.message || \"\".concat(errorMessage, \": \").concat(response.statusText);\n            } catch (e) {\n                errorMessage = \"\".concat(errorMessage, \": \").concat(response.statusText);\n            }\n            throw new Error(errorMessage);\n        }\n        const result = await response.json();\n        if (!result.form_id) {\n            throw new Error('No form ID returned from server');\n        }\n        // Store form name from API response\n        sessionStorage.setItem('currentFormName', result.form_name);\n        sessionStorage.setItem('currentFormId', result.form_id.toString());\n        return result;\n    } catch (error) {\n        console.error('SaveForm Error:', error);\n        throw error;\n    }\n}\nasync function updateForm(formUpdate) {\n    try {\n        var _formUpdate_form_name;\n        if (!formUpdate.form_id) {\n            throw new Error('Form ID is required for updates');\n        }\n        const simplifiedFields = formUpdate.fields.map((field)=>({\n                id: field.id,\n                type: field.type,\n                label: field.label,\n                required: field.required || false,\n                options: field.options || [],\n                placeholder: field.placeholder || \"Enter \".concat(field.label.toLowerCase())\n            }));\n        const payload = {\n            form_id: formUpdate.form_id,\n            form_name: ((_formUpdate_form_name = formUpdate.form_name) === null || _formUpdate_form_name === void 0 ? void 0 : _formUpdate_form_name.trim()) || 'Untitled Form',\n            fields: simplifiedFields,\n            user_id: formUpdate.user_id,\n            updated_at: new Date().toISOString()\n        };\n        try {\n            var _data_detail;\n            // First try to update the form\n            const backendUrl = \"http://localhost:8000\" + '/api/forms/update';\n            const response = await fetch(backendUrl, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload),\n                credentials: 'include'\n            });\n            const data = await response.json();\n            // If the form doesn't exist, create a new one\n            if (!response.ok && (((_data_detail = data.detail) === null || _data_detail === void 0 ? void 0 : _data_detail.includes('not found')) || response.status === 404)) {\n                console.log('Form not found, creating a new one instead');\n                return await saveForm(formUpdate.form_name, formUpdate.fields, formUpdate.user_id);\n            }\n            if (!response.ok) {\n                throw new Error(data.detail || 'Failed to update form');\n            }\n            return data;\n        } catch (error) {\n            var _error_message, _error_message1;\n            // If there's a network error or other issue, try to create a new form\n            if (((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes('not found')) || ((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes('Failed to fetch'))) {\n                console.log('Error updating form, creating a new one instead:', error);\n                return await saveForm(formUpdate.form_name, formUpdate.fields, formUpdate.user_id);\n            }\n            throw error;\n        }\n    } catch (error) {\n        console.error('UpdateForm Error:', error);\n        throw error;\n    }\n}\n// Add function to get form data\nasync function getFormData(formId) {\n    try {\n        const backendUrl = \"\".concat(\"http://localhost:8000\", \"/api/forms/\").concat(formId);\n        const response = await fetch(backendUrl);\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>({}));\n            throw new Error(\"Failed to fetch form data: \".concat(errorData.message || response.statusText));\n        }\n        const result = await response.json();\n        console.log('Get Form Response:', result);\n        return result;\n    } catch (error) {\n        console.error('GetForm Error:', error);\n        throw error;\n    }\n}\nasync function autoSaveForm(formId, formName, fields) {\n    const userId = Number(sessionStorage.getItem('userId')) || 1; // Get userId from session or default\n    return updateForm({\n        form_id: formId,\n        form_name: (formName === null || formName === void 0 ? void 0 : formName.trim()) || 'Untitled Form',\n        fields: fields,\n        user_id: userId,\n        updated_at: new Date().toISOString()\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/forms/FormSaver.tsx\n"));

/***/ })

});